{"pages":[{"title":"Oops！本頁面不存在","text":"看來你掉進貓貓黑洞裡了 點這裡 返回首頁 svg:not(:root).svg-inline--fa { overflow: visible; } .svg-inline--fa { display: inline-block; font-size: inherit; height: 1em; overflow: visible; vertical-align: -0.125em; } .svg-inline--fa.fa-lg { vertical-align: -0.225em; } .svg-inline--fa.fa-w-1 { width: 0.0625em; } .svg-inline--fa.fa-w-2 { width: 0.125em; } .svg-inline--fa.fa-w-3 { width: 0.1875em; } .svg-inline--fa.fa-w-4 { width: 0.25em; } .svg-inline--fa.fa-w-5 { width: 0.3125em; } .svg-inline--fa.fa-w-6 { width: 0.375em; } .svg-inline--fa.fa-w-7 { width: 0.4375em; } .svg-inline--fa.fa-w-8 { width: 0.5em; } .svg-inline--fa.fa-w-9 { width: 0.5625em; } .svg-inline--fa.fa-w-10 { width: 0.625em; } .svg-inline--fa.fa-w-11 { width: 0.6875em; } .svg-inline--fa.fa-w-12 { width: 0.75em; } .svg-inline--fa.fa-w-13 { width: 0.8125em; } .svg-inline--fa.fa-w-14 { width: 0.875em; } .svg-inline--fa.fa-w-15 { width: 0.9375em; } .svg-inline--fa.fa-w-16 { width: 1em; } .svg-inline--fa.fa-w-17 { width: 1.0625em; } .svg-inline--fa.fa-w-18 { width: 1.125em; } .svg-inline--fa.fa-w-19 { width: 1.1875em; } .svg-inline--fa.fa-w-20 { width: 1.25em; } .svg-inline--fa.fa-pull-left { margin-right: 0.3em; width: auto; } .svg-inline--fa.fa-pull-right { margin-left: 0.3em; width: auto; } .svg-inline--fa.fa-border { height: 1.5em; } .svg-inline--fa.fa-li { width: 2em; } .svg-inline--fa.fa-fw { width: 1.25em; } .fa-layers svg.svg-inline--fa { bottom: 0; left: 0; margin: auto; position: absolute; right: 0; top: 0; } .fa-layers { display: inline-block; height: 1em; position: relative; text-align: center; vertical-align: -0.125em; width: 1em; } .fa-layers svg.svg-inline--fa { -webkit-transform-origin: center center; transform-origin: center center; } .fa-layers-counter, .fa-layers-text { display: inline-block; position: absolute; text-align: center; } .fa-layers-text { left: 50%; top: 50%; -webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%); -webkit-transform-origin: center center; transform-origin: center center; } .fa-layers-counter { background-color: #ff253a; border-radius: 1em; -webkit-box-sizing: border-box; box-sizing: border-box; color: #fff; height: 1.5em; line-height: 1; max-width: 5em; min-width: 1.5em; overflow: hidden; padding: 0.25em; right: 0; text-overflow: ellipsis; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top right; transform-origin: top right; } .fa-layers-bottom-right { bottom: 0; right: 0; top: auto; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: bottom right; transform-origin: bottom right; } .fa-layers-bottom-left { bottom: 0; left: 0; right: auto; top: auto; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: bottom left; transform-origin: bottom left; } .fa-layers-top-right { right: 0; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top right; transform-origin: top right; } .fa-layers-top-left { left: 0; right: auto; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top left; transform-origin: top left; } .fa-lg { font-size: 1.3333333333em; line-height: 0.75em; vertical-align: -0.0667em; } .fa-xs { font-size: 0.75em; } .fa-sm { font-size: 0.875em; } .fa-1x { font-size: 1em; } .fa-2x { font-size: 2em; } .fa-3x { font-size: 3em; } .fa-4x { font-size: 4em; } .fa-5x { font-size: 5em; } .fa-6x { font-size: 6em; } .fa-7x { font-size: 7em; } .fa-8x { font-size: 8em; } .fa-9x { font-size: 9em; } .fa-10x { font-size: 10em; } .fa-fw { text-align: center; width: 1.25em; } .fa-ul { list-style-type: none; margin-left: 2.5em; padding-left: 0; } .fa-ul > li { position: relative; } .fa-li { left: -2em; position: absolute; text-align: center; width: 2em; line-height: inherit; } .fa-border { border: solid 0.08em #eee; border-radius: 0.1em; padding: 0.2em 0.25em 0.15em; } .fa-pull-left { float: left; } .fa-pull-right { float: right; } .fa.fa-pull-left, .fas.fa-pull-left, .far.fa-pull-left, .fal.fa-pull-left, .fab.fa-pull-left { margin-right: 0.3em; } .fa.fa-pull-right, .fas.fa-pull-right, .far.fa-pull-right, .fal.fa-pull-right, .fab.fa-pull-right { margin-left: 0.3em; } .fa-spin { -webkit-animation: fa-spin 2s infinite linear; animation: fa-spin 2s infinite linear; } .fa-pulse { -webkit-animation: fa-spin 1s infinite steps(8); animation: fa-spin 1s infinite steps(8); } @-webkit-keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } .fa-rotate-90 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\"; -webkit-transform: rotate(90deg); transform: rotate(90deg); } .fa-rotate-180 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\"; -webkit-transform: rotate(180deg); transform: rotate(180deg); } .fa-rotate-270 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\"; -webkit-transform: rotate(270deg); transform: rotate(270deg); } .fa-flip-horizontal { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\"; -webkit-transform: scale(-1, 1); transform: scale(-1, 1); } .fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"; -webkit-transform: scale(1, -1); transform: scale(1, -1); } .fa-flip-both, .fa-flip-horizontal.fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"; -webkit-transform: scale(-1, -1); transform: scale(-1, -1); } :root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270, :root .fa-flip-horizontal, :root .fa-flip-vertical, :root .fa-flip-both { -webkit-filter: none; filter: none; } .fa-stack { display: inline-block; height: 2em; position: relative; width: 2.5em; } .fa-stack-1x, .fa-stack-2x { bottom: 0; left: 0; margin: auto; position: absolute; right: 0; top: 0; } .svg-inline--fa.fa-stack-1x { height: 1em; width: 1.25em; } .svg-inline--fa.fa-stack-2x { height: 2em; width: 2.5em; } .fa-inverse { color: #fff; } .sr-only { border: 0; clip: rect(0, 0, 0, 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } .sr-only-focusable:active, .sr-only-focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; } .svg-inline--fa .fa-primary { fill: var(--fa-primary-color, currentColor); opacity: 1; opacity: var(--fa-primary-opacity, 1); } .svg-inline--fa .fa-secondary { fill: var(--fa-secondary-color, currentColor); opacity: 0.4; opacity: var(--fa-secondary-opacity, 0.4); } .svg-inline--fa.fa-swap-opacity .fa-primary { opacity: 0.4; opacity: var(--fa-secondary-opacity, 0.4); } .svg-inline--fa.fa-swap-opacity .fa-secondary { opacity: 1; opacity: var(--fa-primary-opacity, 1); } .svg-inline--fa mask .fa-primary, .svg-inline--fa mask .fa-secondary { fill: black; } .fad.fa-inverse { color: #fff; }","link":"/404"},{"title":"關於我","text":"喜歡聽表演的後端工程師。擅長在腦中建構但不擅長表達，所以寫些技術文章幫助自己 level up。 受到 Uncle Bob 的書 The Clean Coder: A Code of Conduct for Professional Programmers 啟發，以成為 職人工程師 為目標努力中。 2020 年起與朋友一起經營科技類 Podcast 節目 BitWise 一點智慧，用輕鬆、無負擔的方式，聊聊軟體開發、工作與生活。 如果對我的文章、Podcast 有想法，歡迎寫信到 wang.szechi@gmail.com 與我交流。 工作經歷Bonio 後端工程師 2019.4 - 2021.4 利用 Node.js、MongoDB、GraphQL 進行後端 API 開發。開發範疇包含：商品建置與販售、金流串接與測試、SaaS 訂閱方案管理、權限管理。 使用 Electricsearch 架構搜尋功能，提升搜尋精準度與速度。 使用 JMeter 對核心 API 進行壓力測試，改善效能瓶頸。 LINE TV（前 CHOCO TV）實習後端工程師 2018.2 - 2019.1 使用 AWS 微服務搭配 MediaConvert 架構影片轉檔系統，提升轉檔工作的穩定度與效率。 架設 LINE TV 官方聊天機器人，透過 LINE 推薦「熱門戲劇」給使用者。 使用 Node.js、React / Redux 及 MySQL 開發內部「戲劇資料管理系統」，協助管理版權合約、產出報表，降低人力產出報表的時間成本。 關於部落格本站使用網誌框架 Hexo 與主題 Minos 架設。樣式上參考 Huli 大大的修改，並針對無法運作的 plugins 進行修正。 svg:not(:root).svg-inline--fa { overflow: visible; } .svg-inline--fa { display: inline-block; font-size: inherit; height: 1em; overflow: visible; vertical-align: -0.125em; } .svg-inline--fa.fa-lg { vertical-align: -0.225em; } .svg-inline--fa.fa-w-1 { width: 0.0625em; } .svg-inline--fa.fa-w-2 { width: 0.125em; } .svg-inline--fa.fa-w-3 { width: 0.1875em; } .svg-inline--fa.fa-w-4 { width: 0.25em; } .svg-inline--fa.fa-w-5 { width: 0.3125em; } .svg-inline--fa.fa-w-6 { width: 0.375em; } .svg-inline--fa.fa-w-7 { width: 0.4375em; } .svg-inline--fa.fa-w-8 { width: 0.5em; } .svg-inline--fa.fa-w-9 { width: 0.5625em; } .svg-inline--fa.fa-w-10 { width: 0.625em; } .svg-inline--fa.fa-w-11 { width: 0.6875em; } .svg-inline--fa.fa-w-12 { width: 0.75em; } .svg-inline--fa.fa-w-13 { width: 0.8125em; } .svg-inline--fa.fa-w-14 { width: 0.875em; } .svg-inline--fa.fa-w-15 { width: 0.9375em; } .svg-inline--fa.fa-w-16 { width: 1em; } .svg-inline--fa.fa-w-17 { width: 1.0625em; } .svg-inline--fa.fa-w-18 { width: 1.125em; } .svg-inline--fa.fa-w-19 { width: 1.1875em; } .svg-inline--fa.fa-w-20 { width: 1.25em; } .svg-inline--fa.fa-pull-left { margin-right: 0.3em; width: auto; } .svg-inline--fa.fa-pull-right { margin-left: 0.3em; width: auto; } .svg-inline--fa.fa-border { height: 1.5em; } .svg-inline--fa.fa-li { width: 2em; } .svg-inline--fa.fa-fw { width: 1.25em; } .fa-layers svg.svg-inline--fa { bottom: 0; left: 0; margin: auto; position: absolute; right: 0; top: 0; } .fa-layers { display: inline-block; height: 1em; position: relative; text-align: center; vertical-align: -0.125em; width: 1em; } .fa-layers svg.svg-inline--fa { -webkit-transform-origin: center center; transform-origin: center center; } .fa-layers-counter, .fa-layers-text { display: inline-block; position: absolute; text-align: center; } .fa-layers-text { left: 50%; top: 50%; -webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%); -webkit-transform-origin: center center; transform-origin: center center; } .fa-layers-counter { background-color: #ff253a; border-radius: 1em; -webkit-box-sizing: border-box; box-sizing: border-box; color: #fff; height: 1.5em; line-height: 1; max-width: 5em; min-width: 1.5em; overflow: hidden; padding: 0.25em; right: 0; text-overflow: ellipsis; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top right; transform-origin: top right; } .fa-layers-bottom-right { bottom: 0; right: 0; top: auto; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: bottom right; transform-origin: bottom right; } .fa-layers-bottom-left { bottom: 0; left: 0; right: auto; top: auto; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: bottom left; transform-origin: bottom left; } .fa-layers-top-right { right: 0; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top right; transform-origin: top right; } .fa-layers-top-left { left: 0; right: auto; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top left; transform-origin: top left; } .fa-lg { font-size: 1.3333333333em; line-height: 0.75em; vertical-align: -0.0667em; } .fa-xs { font-size: 0.75em; } .fa-sm { font-size: 0.875em; } .fa-1x { font-size: 1em; } .fa-2x { font-size: 2em; } .fa-3x { font-size: 3em; } .fa-4x { font-size: 4em; } .fa-5x { font-size: 5em; } .fa-6x { font-size: 6em; } .fa-7x { font-size: 7em; } .fa-8x { font-size: 8em; } .fa-9x { font-size: 9em; } .fa-10x { font-size: 10em; } .fa-fw { text-align: center; width: 1.25em; } .fa-ul { list-style-type: none; margin-left: 2.5em; padding-left: 0; } .fa-ul > li { position: relative; } .fa-li { left: -2em; position: absolute; text-align: center; width: 2em; line-height: inherit; } .fa-border { border: solid 0.08em #eee; border-radius: 0.1em; padding: 0.2em 0.25em 0.15em; } .fa-pull-left { float: left; } .fa-pull-right { float: right; } .fa.fa-pull-left, .fas.fa-pull-left, .far.fa-pull-left, .fal.fa-pull-left, .fab.fa-pull-left { margin-right: 0.3em; } .fa.fa-pull-right, .fas.fa-pull-right, .far.fa-pull-right, .fal.fa-pull-right, .fab.fa-pull-right { margin-left: 0.3em; } .fa-spin { -webkit-animation: fa-spin 2s infinite linear; animation: fa-spin 2s infinite linear; } .fa-pulse { -webkit-animation: fa-spin 1s infinite steps(8); animation: fa-spin 1s infinite steps(8); } @-webkit-keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } .fa-rotate-90 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\"; -webkit-transform: rotate(90deg); transform: rotate(90deg); } .fa-rotate-180 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\"; -webkit-transform: rotate(180deg); transform: rotate(180deg); } .fa-rotate-270 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\"; -webkit-transform: rotate(270deg); transform: rotate(270deg); } .fa-flip-horizontal { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\"; -webkit-transform: scale(-1, 1); transform: scale(-1, 1); } .fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"; -webkit-transform: scale(1, -1); transform: scale(1, -1); } .fa-flip-both, .fa-flip-horizontal.fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"; -webkit-transform: scale(-1, -1); transform: scale(-1, -1); } :root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270, :root .fa-flip-horizontal, :root .fa-flip-vertical, :root .fa-flip-both { -webkit-filter: none; filter: none; } .fa-stack { display: inline-block; height: 2em; position: relative; width: 2.5em; } .fa-stack-1x, .fa-stack-2x { bottom: 0; left: 0; margin: auto; position: absolute; right: 0; top: 0; } .svg-inline--fa.fa-stack-1x { height: 1em; width: 1.25em; } .svg-inline--fa.fa-stack-2x { height: 2em; width: 2.5em; } .fa-inverse { color: #fff; } .sr-only { border: 0; clip: rect(0, 0, 0, 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } .sr-only-focusable:active, .sr-only-focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; } .svg-inline--fa .fa-primary { fill: var(--fa-primary-color, currentColor); opacity: 1; opacity: var(--fa-primary-opacity, 1); } .svg-inline--fa .fa-secondary { fill: var(--fa-secondary-color, currentColor); opacity: 0.4; opacity: var(--fa-secondary-opacity, 0.4); } .svg-inline--fa.fa-swap-opacity .fa-primary { opacity: 0.4; opacity: var(--fa-secondary-opacity, 0.4); } .svg-inline--fa.fa-swap-opacity .fa-secondary { opacity: 1; opacity: var(--fa-primary-opacity, 1); } .svg-inline--fa mask .fa-primary, .svg-inline--fa mask .fa-secondary { fill: black; } .fad.fa-inverse { color: #fff; }","link":"/about/"}],"posts":[{"title":"部落格開張","text":"參考了幾個部落格工具，如 WordPress、Wix、痞客邦…後，決定發揮工程師魂，利用開源工具搭建自己的部落格平台。最後選擇了基於 Node.js 的網誌框架系統 Hexo，用 MarkDown 語法產出部落格文章後，產生靜態檔案部署到 GitHub Pages 上，既美觀又省錢 (*´∀`)~♥ 部落格主題選用 Minos，除了在樣式上參考 Huli 大大的修改外，也針對年久失修的 plugins 進行修正。","link":"/about-blog/"},{"title":"BitWise 一點智慧：關於 Ep1 - Ep5","text":"2020 年起，我跟朋友 Jam 一起主持了科技類 Podcast 節目 BitWise 一點智慧。內容以淺顯易懂的方式介紹軟體工程，包括：網頁開發、資料庫、前後端分工、git flow …等等，也會聊聊彼此在新創工作的經驗、生活中的有趣大小事。身為兩位剛出社會的工程師，我們也藉由「說」技術給大家聽的過程紮實自己的技術基礎。 以下是 Ep1 - Ep5 的主題大綱，歡迎大家透過 Spotify 或 Apple Podcast 收聽～～ Ep5 - 聊軟體工程師的團隊合作：工程師們如何共同開發而不衝突呢？好的工作流程讓一群人的效益發揮，壞的流程則讓人一起跌倒。本集主要聊「多人」如何一起工作，「多個功能」怎麼同時被開發、以及 git 版本控制工具介紹。 這集很平易近人，特別推薦 git 部分給新手工程師聽，因為我曾在做大學專題時不會用 git / git flow 而發生太多蠢事。 Ep4 - 聊我們開始寫程式的過程：這集是經驗分享，聊我們從開始寫程式到工作後的心情，可以當作在聽我們與程式談戀愛的過程 (｡◕∀◕｡) 最近發現身邊不少朋友對寫程式有興趣、想入門，可以聽聽 Jam 非本科的轉職過程，以及我們推薦的學習資源（學習要靠自己，找對資源是第一步）。 Ep3 - 聊資料庫，酷爆了：聊資料庫是什麼、資料庫在軟體服務中的重要性，也針對「密碼儲存」做資安討論（保護一下自己，不讓密碼裸奔）。 這集是個大挑戰，因為主題聽來很技術、擔心會嚇跑人，所以下功夫找了平易近人的方式說明。 Ep2 - 聊網頁開發：大家時刻都在上網，但你真的了解他嗎！這集聊網頁及前端開發流程、組成網頁畫面的元素、簡單的網路連線資安觀念（保護一下自己，不讓信用卡號裸奔）。 如果對寫程式完全沒有興趣，可以從這集聽起，畢竟總會上網吧！ Ep1 - 聊實習經驗：這集聊我們的實習經驗、收穫，也針對正在找實習人給建議。 因為是第一集，練習口條的成分很高 ﾟヽ(ﾟ´Д`)ﾉﾟ推薦給大學快畢業、正在找實習、及想享受尷尬的朋友。 如果對 Podcast 的內容有心得或想法，歡迎寫信到 bitwise.podcast.tech@gmail.com 和我們分享～ svg:not(:root).svg-inline--fa { overflow: visible; } .svg-inline--fa { display: inline-block; font-size: inherit; height: 1em; overflow: visible; vertical-align: -0.125em; } .svg-inline--fa.fa-lg { vertical-align: -0.225em; } .svg-inline--fa.fa-w-1 { width: 0.0625em; } .svg-inline--fa.fa-w-2 { width: 0.125em; } .svg-inline--fa.fa-w-3 { width: 0.1875em; } .svg-inline--fa.fa-w-4 { width: 0.25em; } .svg-inline--fa.fa-w-5 { width: 0.3125em; } .svg-inline--fa.fa-w-6 { width: 0.375em; } .svg-inline--fa.fa-w-7 { width: 0.4375em; } .svg-inline--fa.fa-w-8 { width: 0.5em; } .svg-inline--fa.fa-w-9 { width: 0.5625em; } .svg-inline--fa.fa-w-10 { width: 0.625em; } .svg-inline--fa.fa-w-11 { width: 0.6875em; } .svg-inline--fa.fa-w-12 { width: 0.75em; } .svg-inline--fa.fa-w-13 { width: 0.8125em; } .svg-inline--fa.fa-w-14 { width: 0.875em; } .svg-inline--fa.fa-w-15 { width: 0.9375em; } .svg-inline--fa.fa-w-16 { width: 1em; } .svg-inline--fa.fa-w-17 { width: 1.0625em; } .svg-inline--fa.fa-w-18 { width: 1.125em; } .svg-inline--fa.fa-w-19 { width: 1.1875em; } .svg-inline--fa.fa-w-20 { width: 1.25em; } .svg-inline--fa.fa-pull-left { margin-right: 0.3em; width: auto; } .svg-inline--fa.fa-pull-right { margin-left: 0.3em; width: auto; } .svg-inline--fa.fa-border { height: 1.5em; } .svg-inline--fa.fa-li { width: 2em; } .svg-inline--fa.fa-fw { width: 1.25em; } .fa-layers svg.svg-inline--fa { bottom: 0; left: 0; margin: auto; position: absolute; right: 0; top: 0; } .fa-layers { display: inline-block; height: 1em; position: relative; text-align: center; vertical-align: -0.125em; width: 1em; } .fa-layers svg.svg-inline--fa { -webkit-transform-origin: center center; transform-origin: center center; } .fa-layers-counter, .fa-layers-text { display: inline-block; position: absolute; text-align: center; } .fa-layers-text { left: 50%; top: 50%; -webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%); -webkit-transform-origin: center center; transform-origin: center center; } .fa-layers-counter { background-color: #ff253a; border-radius: 1em; -webkit-box-sizing: border-box; box-sizing: border-box; color: #fff; height: 1.5em; line-height: 1; max-width: 5em; min-width: 1.5em; overflow: hidden; padding: 0.25em; right: 0; text-overflow: ellipsis; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top right; transform-origin: top right; } .fa-layers-bottom-right { bottom: 0; right: 0; top: auto; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: bottom right; transform-origin: bottom right; } .fa-layers-bottom-left { bottom: 0; left: 0; right: auto; top: auto; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: bottom left; transform-origin: bottom left; } .fa-layers-top-right { right: 0; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top right; transform-origin: top right; } .fa-layers-top-left { left: 0; right: auto; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top left; transform-origin: top left; } .fa-lg { font-size: 1.3333333333em; line-height: 0.75em; vertical-align: -0.0667em; } .fa-xs { font-size: 0.75em; } .fa-sm { font-size: 0.875em; } .fa-1x { font-size: 1em; } .fa-2x { font-size: 2em; } .fa-3x { font-size: 3em; } .fa-4x { font-size: 4em; } .fa-5x { font-size: 5em; } .fa-6x { font-size: 6em; } .fa-7x { font-size: 7em; } .fa-8x { font-size: 8em; } .fa-9x { font-size: 9em; } .fa-10x { font-size: 10em; } .fa-fw { text-align: center; width: 1.25em; } .fa-ul { list-style-type: none; margin-left: 2.5em; padding-left: 0; } .fa-ul > li { position: relative; } .fa-li { left: -2em; position: absolute; text-align: center; width: 2em; line-height: inherit; } .fa-border { border: solid 0.08em #eee; border-radius: 0.1em; padding: 0.2em 0.25em 0.15em; } .fa-pull-left { float: left; } .fa-pull-right { float: right; } .fa.fa-pull-left, .fas.fa-pull-left, .far.fa-pull-left, .fal.fa-pull-left, .fab.fa-pull-left { margin-right: 0.3em; } .fa.fa-pull-right, .fas.fa-pull-right, .far.fa-pull-right, .fal.fa-pull-right, .fab.fa-pull-right { margin-left: 0.3em; } .fa-spin { -webkit-animation: fa-spin 2s infinite linear; animation: fa-spin 2s infinite linear; } .fa-pulse { -webkit-animation: fa-spin 1s infinite steps(8); animation: fa-spin 1s infinite steps(8); } @-webkit-keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } .fa-rotate-90 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\"; -webkit-transform: rotate(90deg); transform: rotate(90deg); } .fa-rotate-180 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\"; -webkit-transform: rotate(180deg); transform: rotate(180deg); } .fa-rotate-270 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\"; -webkit-transform: rotate(270deg); transform: rotate(270deg); } .fa-flip-horizontal { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\"; -webkit-transform: scale(-1, 1); transform: scale(-1, 1); } .fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"; -webkit-transform: scale(1, -1); transform: scale(1, -1); } .fa-flip-both, .fa-flip-horizontal.fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"; -webkit-transform: scale(-1, -1); transform: scale(-1, -1); } :root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270, :root .fa-flip-horizontal, :root .fa-flip-vertical, :root .fa-flip-both { -webkit-filter: none; filter: none; } .fa-stack { display: inline-block; height: 2em; position: relative; width: 2.5em; } .fa-stack-1x, .fa-stack-2x { bottom: 0; left: 0; margin: auto; position: absolute; right: 0; top: 0; } .svg-inline--fa.fa-stack-1x { height: 1em; width: 1.25em; } .svg-inline--fa.fa-stack-2x { height: 2em; width: 2.5em; } .fa-inverse { color: #fff; } .sr-only { border: 0; clip: rect(0, 0, 0, 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } .sr-only-focusable:active, .sr-only-focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; } .svg-inline--fa .fa-primary { fill: var(--fa-primary-color, currentColor); opacity: 1; opacity: var(--fa-primary-opacity, 1); } .svg-inline--fa .fa-secondary { fill: var(--fa-secondary-color, currentColor); opacity: 0.4; opacity: var(--fa-secondary-opacity, 0.4); } .svg-inline--fa.fa-swap-opacity .fa-primary { opacity: 0.4; opacity: var(--fa-secondary-opacity, 0.4); } .svg-inline--fa.fa-swap-opacity .fa-secondary { opacity: 1; opacity: var(--fa-primary-opacity, 1); } .svg-inline--fa mask .fa-primary, .svg-inline--fa mask .fa-secondary { fill: black; } .fad.fa-inverse { color: #fff; }","link":"/bitwise/brief-ep1-ep5/"},{"title":"新手到進階學 MongoDB（1）- 基礎教學","text":"前言近幾年非關聯式資料庫（NoSQL）成為大家時常討論的技術主題，而 MongoDB 則是最廣為人知的開源 NoSQL 資料庫。 本篇文章是系列文新手到進階學 MongoDB 的第一篇。架構如下： MongoDB 是什麼？ MongoDB 的層級架構：Database、Collection、Document MongoDB 的資料儲存：什麼是BSON？ MongoDB 基礎語法：創建第一筆資料 MongoDB 是什麼？在 MongoDB 的官方文件裡開宗明義的寫了： MongoDB is a document database designed for ease of development and scaling. 由這句話我們可以看出： MongoDB 是一個由document為主的 database MongoDB 的優點是易於開發、擴展 我們先來談談為什麼 mongoDB 有易於開發的優點，以及為什麼近幾年很多新創都會選擇使用 MongoDB。 為什麼 MongoDB 易於開發？若曾經接觸過關聯式資料庫（Relational database/SQL 資料庫），應該對於Schema（綱要）的概念不陌生。在關聯式資料庫中我們必須事先定義好 Schema（也就是每張Table（資料表）中包含哪些Column（欄）），並確保每筆儲存的Row（資料）都遵循 schema 的定義。 例如我們想要在 SQL 資料庫中紀錄有關user的相關資訊，如果最初定義User 資料表的 schema 有名字、職業、血型三個欄位，則資料表中的每筆資料（也就是每位 user）都必須「不多不少」的擁有這三個欄位。問題來了，如果今天我只想幫其中一個 user 紀錄嗜好呢？ 由於 SQL 資料庫必須遵守 schema 定義，因此必須要： 先更動 schema，在 schema 加上嗜好欄位 寫個腳本幫現有的所有 user 都填上嗜好（不知道嗜好的 user 就填入空值） 是不是挺麻煩的？面對上述的情境，NoSQL的 MongoDB 就彈性許多。 因為 MongoDB 不需要定義 Schema，可以大幅縮短開發時間，也很適合用於資料格式常變動的新創應用中。我們稱 MongoDB 的特性是Schemaless。 MongoDB 的層級架構再來談談 MongoDB 世界的層級觀念，分別由大而小是Database、Collection與Document。 Database在一個 MongoDB 伺服器中通常會有一至多個Database。通常將不同的應用放在不同 database 中。 例如某家公司同時擁有產品 A 跟產品 B，且兩個產品資料是不相通的，那就可以在 MongoDB 中建立兩個 database，分別儲存兩個產品的資料。 CollectionCollection就是資料表，概念好比關聯式資料庫的 Table。通常一個 databse 中會有數個 collection。 例如針對產品 A，我們可能會想紀錄「購買人資訊」、「製造商資訊」、「販售地點」…等等，因此可以在「產品 A 的 database」 中分別開設對應的 collection。 DocumentDocument就是一筆資料，概念好比關聯式資料庫的 Row。通常一個 collection 中會有數筆 document。也因此我們稱 MongoDB 是 document database。 例如在「購買人資訊」的 collection 中，真正的一筆「購買人資訊」就是一個 document。 層級架構圖圖片來源 MongoDB 的資料儲存Document 的長相其實 Document 就長得像 JSON 一樣， 由多組 key-value 組成。 假如有兩筆描述 user 的 document 長相如下： 1234567891011// 以下是兩筆 user 的 document{ name: 'Suki', job: 'backend developer', bloodType: 'A'},{ name: 'Jam', job: 'fullstack developer', bloodType: 'A'} 因為 MongoDB 的 schemeless 特性，當我們突然想為其中一個 user 紀錄嗜好，只需要在那個 user 的 document 中加入「嗜好」這個新欄位就行，其他 user 完全不受影響。 1234567891011121314// 為第二位 user 紀錄嗜好{ // 其他 user 不被影響 name: 'Suki', job: 'backend developer', bloodType: 'A'},{ // 加上 hobbbies 紀錄 user 的嗜好 name: 'Jam', job: 'fullstack developer', bloodType: 'A', hobbies: ['hiking', 'podcast', 'sleeping']} 使用 NoSQL 資料庫時，有關聯的資料常常會被儲存在同一個 document 中。 BSON上面有提到，每筆 document 的長相是如 JSON 格式的 key-value 組合。實際 MongoDB 在儲存資料時，使用的是較特殊的BSON格式。(BSON 是 JSON 的二進位表示形式) 使用 BSON 的優點包含： 在空間儲存上較有效率 有更多type（資料格式） 可以使用： 如ObjectId、Regular Expression、Timestamp等，都是 BSON 支援的格式 BSON 支援的資料格式列表可以參考官方文件 上面 user 的例子裡使用了String 來描述名字、職業、血型；並使用 Array 來紀錄嗜好。實際上 BSON 支援的 type 有很多，這邊我們再舉一個包含多種 type 的 document 當作範例： 123456789// 一個包含多種資料格式 的 document{ _id: ObjectId(\"5099803df3f4948bd2f98391\"), // _id 屬性是 ObjectId，常作為主鍵 name: { first: \"Alan\", last: \"Turing\" }, // name 屬性是 object birth: new Date('Jun 23, 1912'), // bitrh 屬性是日期 death: new Date('Jun 07, 1954'), contribs: [ \"Turing machine\", \"Turing test\", \"Turingery\" ], views : NumberLong(1250000)} MongoDB 基礎語法 網路上已有數篇 MongoDB 的安裝教學文，因此不在本系列文中贅述。還沒有安裝 MongoDB 話可以參考官方安裝教學。 來嘗試創建資料進 MongoDB 吧！我們可以透過不同程式語言對 server 進行操作。這邊示範透過 shell 進行操作。 創建第一筆資料由於 MongoDB 是 Schemaless 資料庫、不需要事先定義資料表欄位，因此創建資料非常容易。只需要輸入簡單的兩行指令即可： 12use myNewDBdb.posts.insertOne( { title: 'hello mongoDB', author: 'suki' } ) 第一行指令：指定使用名為myNewDB的 database 如果myNewDB不存在，MongoDB 會自動幫我們創造 如果myNewDB已經存在，MongoDB 會切換到該 database 底下 第二行指令：在名為posts的 collection 中創建一筆 document 該 document 有 title 跟 author 兩個欄位 同理，如果posts不存在， MongoDB 會自動幫我們創建 沒錯！透過 MongoDB 創建資料就是這麼簡單！ヽ(✿ﾟ▽ﾟ)ノ 總結MongoDB 強大的原因之一在於資料儲存的彈性。由於不需要定義 Schema，因此可以很輕易的加入、修改資料，對於資料格式時常變動的應用非常友善。 下篇文章我們將介紹 MongoDB 的C（創建）、R（讀取）、U（更新）、D（刪除）操作～ 後記由於工作上常使用 MongoDB，原本想趁著 CoderBridge 在 2020 年舉辦的「開發者寫作松」紀錄一下 MongoDB 的基礎到進階用法，但只寫了兩篇就偷懶症發作 (´ﾟдﾟ`) 趁著最近經營部落格的計劃死灰復燃，再次挑戰完成本系列教學文 ～本文章最初刊載在 CoderBridge：7 天新手到進階學 MongoDB 系列文中。","link":"/mongodb-from-scratch/1/"},{"title":"新手到進階學 MongoDB（2）- CRUD 教學","text":"前言本篇文章是系列文新手到進階學 MongoDB 的第二篇，要帶大家實際對 MongoDB 進行資料操作～ 這篇文章將介紹資料的基本操作，包含： Create：創建資料 Read：讀取資料 Update：更新資料 Delete：刪除資料 你也可以在上一篇文章中複習 MongoDB 的基礎概念。 Create 創建資料在 MongoDB 創建資料的指令很單純，常用的有以下兩個： insertOne用於創建一筆新的 document。 下面的例子會在名為products的 collection 中創建一筆紀錄了商品項目（item）及商品數量（qty）的 document： 1db.products.insertOne( { item: \"card\", qty: 15 } ); insertMany用於創建多筆新的 documents。 下面的例子會在名為products的 collection 中創建三筆 documents。我們將要創建的多筆 documents 放在 Array 中，mongoDB 會依照 array 中 item 的順序去依序 insert： 12345db.products.insertMany( [ { item: \"card\", qty: 15 }, { item: \"envelope\", qty: 20 }, { item: \"stamps\" , qty: 30, price: 1000 } // 有 price 資訊的 document ] ); 還記得 MongoDB 的特性是 Schemaless 的嗎？在創建 document 時，每筆 document 都可以有不同的格式，如上面的stamps有記錄價錢（price）這個資訊，前面兩筆則沒有。 ObjectId如果你透過 MongoDB shell 輸入上方的指令成功創建資料，會看見 MongoDB 回覆了一個 ObjectId 資訊。這個 ObjectId 是什麼呢？ 其實我們每創建一筆資料時，MongoDB 都會主動賦予 document 一個獨特的_id欄位，其值的type（資料格式）就是我們看到的ObjectId。我們通常會拿_id當作該筆資料的主鍵，因為 MongoDB 可以保證同一個 collection 中每筆 document 的_id都是獨一無二的。 我們也可以使用自己定義的_id作為 documet 主鍵。只需要在創建 document 時帶上_id欄位就行，但我們需要保證自己定義的_id不會重複，否則創建操作會失敗。 由於標準JSON中並沒有定義ObjectId這個 type，由此可見 document 是以BSON儲存，而不是常見的 JSON。 Read 讀取資料MongoDB 中可以透過find系列指令查詢資料。 find 與 findOne單純使用find而不帶參數時，會找到該 collection 中所有資料。如下面的例子，我們會拿到記錄在 products 這個 collection 裡的所有 product： 1db.products.find() // 拿回所有資料 一次拿回所有資料雖然方便但效率低落，因此在現實應用中很少這樣做。我們通常會在find指令中帶上query（查詢條件），用來找出符合我們需求的資料。 下面例子會找出_id = 5的 document，由於我們知道_id是獨一無二的，因此可以預期 MongoDB 只會返回一筆（或零筆）資料： 1db.products.find( { _id: 5 } ) 使用 find 會找出所有符合條件的 document。使用 findOne 時，會找出第一筆符合條件的 document。 OperatorsMongoDB 提供了許多Operators（操作符）讓搭配 query 使用，讓我們可以更精準描述想要查詢的資料。 如下面例子中我們使用$gt（greater than）操作符，幫助我們查詢出所有 distance（距離）&gt; 1000 的航班資訊： 1db.flightData.find( { distance: { $gt: 1000 } }) 另一個例子中我們使用$in操作符，找出所有 bloodType（血型）是 A 或 B 的 user 1db.users.find( { bloodType: { $in: ['A', 'B'] } } ) 更詳細的 Operator 列表可以參考官方文件。 Cursor Object當我們透過 shell 操作find指令時，就算已經加上 query 條件，還是有機會一次拿回過多資料導致效率低落（想像你要搜尋姓氏開頭是 A 的使用者，可能超級超級多）。因為效率考量，使用 shell 的 find 指令時，MongoDB 其實是回傳一個Cursor Object，而不是所有符合條件的資料。 Cursor Object 包含了： 部分資料：MongoDB 預設會回傳 20 筆資料 資料指針：指向目前拿到的最後一筆資料。我們可以透過 next 方法向 MongoDB 拿更多資料。 12345678910// 透過 find 指令找出所有血型是 A、B 的 user。拿到 mongoDB 回傳的 Cursor objectvar myCursor = db.users.find( { bloodType: { $in: ['A', 'B'] } } );// 把 cursor 中的資料轉換成 array，預設會拿 20 筆var documentArray = myCursor.toArray();// 透過 hasNext 檢查看看還有還有更多資料，有的話就透過 cursor 的 next 方法拿，並 print 出來while (myCursor.hasNext()) { printjson(myCursor.next());} 關於 Cursor 的更多使用方法可以參考官方文件 Update 更新資料更新跟創建的方式很像。可以選擇只更新一筆資料、也可以一次更新多筆資料。 updateOne在操作更新時，我們使用 query 告訴 MongoDB「想要更新哪些資料」以及「如何更新他們」。 如下面的例子，我們在名為inventory的 collection 中找尋item = paper的資料，並且把資料的 size 更新為 100： 123456db.inventory.updateOne( { item: \"paper\" }, { $set: { \"size\": 100 }, }) 由於我們使用updateOne指令，就算符合 query 條件的資料有很多筆，MongoDB 也只會更新符合條件的第一筆 document。 updateMany同上述的例子，如果指令換成updateMany，則所有符合條件的資料都會被更新。 123456db.inventory.updateMany( { item: \"paper\" }, // 所有 item 欄位值是 paper 的資料都會被更新 { $set: { \"size\": 100 }, }) 使用updateMany要注意的地方是，如果我們在 query 中沒有放上條件，則 collection 中的所有資料都會被更新，因此要小心使用！ 123456db.inventory.updateMany( {}, // 由於 query 為空，所有 document 都會加上 message 這個欄位 { $set: { message: 'Oops' } }) Delete 刪除資料deleteOne 與 deleteMany刪除資料的邏輯跟查詢一樣，我們必須在 query 中描述要被刪除的資料條件。 下述例子會將_id = 5的 document 刪除： 1db.products.deleteOne( { _id: 5 } ) 相同的，我們可以透過deleteMany一次刪除多筆資料。下面例子會將血型為 A 的 user 全部刪除： 123db.user.deleteMany( { bloodType: \"A\" }, // 所有血型為 A 的 user 都被刪除) 要注意的是，如果我們在 query 中沒有放上條件，就會把 collection 裡的所有 documents 全部刪除，因此要謹慎使用！ 1db.inventory.deleteMany({}) // 清空 inventory Collection 總結本篇文章介紹了 MongoDB 中基本的CRUD指令。基本上透過這些指令已經能應付大多數的操作。關於每個指令的詳細介紹可以參考官方文件。 下篇文章我們將針對更強大的Aggregate操作做介紹。 本文章最初刊載在 CoderBridge：7 天新手到進階學 MongoDB系列文中。","link":"/mongodb-from-scratch/2/"},{"title":"新手到進階學 MongoDB（3）- Aggregation 教學","text":"前言本篇文章是系列文新手到進階學 MongoDB 的第三篇，要介紹 MongoDB 中較進階的 Aggregation 用法。 文章的架構如下： Aggregation 基本概念：什麼是 Pipeline 與 Stage ？ 常見的資料操作方法（ㄧ）：$match、$sort、$limit 常見的資料操作方法（二）$project、$group、$unwind Aggregation 綜合練習 你也可以在上一篇文章中複習 MongoDB 的 CRUD 操作。 Aggregation 基本概念MongoDB 的文件裡寫到： Aggregation operations process data records and return computed results. 意思是：Aggregation是幫助我們在 MongoDB server 端進行「資料處理」的工具。 你可能會好奇在 MongoDB server 端進行資料處理的好處是什麼？為什麼不在應用程式端處理就好？舉個例子，假如我們有一個名為 products的 collection，裡頭裡存放了所有商品的資訊。當我們想要知道「最貴的商品是什麼」時，我們有兩種做法： 把所有的商品都查詢出來，再在應用程式中找出價錢最高的商品 透過撰寫 Aggregation 指令，直接在 MongoDB server 端找出價錢最高的商品 可以看出資料量龐大時，比起把所有資料都拿回應用程式端做處理，使用 Aggregation 更有效率些～ 什麼是 Pipeline 跟 Stage如果我們把「資料處理」比喻成「罐頭加工」的過程，那麼： 存在 mongoDB 中的原始資料就是「罐頭的原物料」 Pipeline是罐頭加工廠的「生產線」 Stage是生產線中的「一道手續」 我們透過描述一連串的 stages (手續)來組成 pipeline（生產線），並對原始資料（原物料）進行 aggregate（加工），最終變成我們想要的成果（罐頭）。如同生產線中手續的「優先順序」很重要一樣，pipeline 中 stages 的順序是很重要的，因為每一個 stage 的 input 都是上一個 stage 處理後的 output。 舉例來說，我們可以透過由兩個 stage 組成的 pipeline 找出資料庫中「最貴的科技商品」是什麼。要注意兩個 stage 的順序不能調換： 12345// 針對 products collection 使用 aggregatedb.products.aggregate([ 找出所有「科技類」商品, // 第一個 stage 找到其中「價錢最高」的商品 // 第二個 stage]) 再來我們會介紹幾個常見的 stage 以及應用方法。 常見的資料操作方法（ㄧ）首先要介紹$match、$sort、$limit這三個方法。 $match用來找出符合需求條件的資料。用法就跟上一篇介紹的find很像，是最常用到 Aggregation 方法之一。 假如有一個articlescollection 資料如下： articles1234567{ \"author\" : \"dave\", \"score\" : 80, \"views\" : 100 , \"_id\" : ObjectId(\"512bc95fe835e68f199c8686\") }{ \"author\" : \"dave\", \"score\" : 85, \"views\" : 521 , \"_id\" : ObjectId(\"512bc962e835e68f199c8687\") }{ \"author\" : \"ahn\", \"score\" : 60, \"views\" : 1000 , \"_id\" : ObjectId(\"55f5a192d4bede9ac365b257\") }{ \"author\" : \"li\", \"score\" : 55, \"views\" : 5000 , \"_id\" : ObjectId(\"55f5a192d4bede9ac365b258\") }{ \"author\" : \"annT\", \"score\" : 60, \"views\" : 50 , \"_id\" : ObjectId(\"55f5a1d3d4bede9ac365b259\") }{ \"author\" : \"li\", \"score\" : 94, \"views\" : 999 , \"_id\" : ObjectId(\"55f5a1d3d4bede9ac365b25a\") }{ \"author\" : \"ty\", \"score\" : 95, \"views\" : 1000 , \"_id\" : ObjectId(\"55f5a1d3d4bede9ac365b25b\") } 我們可以用$match方法找出「作者是 dave」 的文章： example-112345// 針對 articles collection 使用 aggregatedb.articles.aggregate( // 只有一個 $match stage 的 pipeline [ { $match : { author : \"dave\" } } ]); 會得出 2 筆結果 example-1-result12{ \"author\" : \"dave\", \"score\" : 80, \"views\" : 100 , \"_id\" : ObjectId(\"512bc95fe835e68f199c8686\") }{ \"author\" : \"dave\", \"score\" : 85, \"views\" : 521 , \"_id\" : ObjectId(\"512bc962e835e68f199c8687\") } 搭配邏輯符號在使用$match時也常搭配上邏輯符號，如$or、$gt、$lt，能夠更精準的描述想要的資料。 下面的範例在articlescollection 中找出「分數大於 80、小於 95」或「觀看次數大於（等於） 1000」的文章： example-2123db.articles.aggregate( [ { $match: { $or: [ { score: { $gt: 80, $lt: 95 } }, { views: { $gte: 1000 } } ] } },] ); 會得出 5 筆結果 example-2-result12345{ \"author\" : \"dave\", \"score\" : 85, \"views\" : 521 , \"_id\" : ObjectId(\"512bc962e835e68f199c8687\") }{ \"author\" : \"ahn\", \"score\" : 60, \"views\" : 1000 , \"_id\" : ObjectId(\"55f5a192d4bede9ac365b257\") }{ \"author\" : \"li\", \"score\" : 55, \"views\" : 5000 , \"_id\" : ObjectId(\"55f5a192d4bede9ac365b258\") }{ \"author\" : \"li\", \"score\" : 94, \"views\" : 999 , \"_id\" : ObjectId(\"55f5a1d3d4bede9ac365b25a\") }{ \"author\" : \"ty\", \"score\" : 95, \"views\" : 1000 , \"_id\" : ObjectId(\"55f5a1d3d4bede9ac365b25b\") } $sort與$limit$sort用來將 documents 依據指定欄位排序，$limit則是限定 documents 的數量。這兩個 stage 常常搭配在一起使用。 同樣以上面articlescollection 為例子，我們可以用$sort與$limit找出「分數最高的三篇文章」： example-312345678db.articles.aggregate( [ // 依照分數「由高而低」排序 {\"$sort\": { \"score\": -1, }}, // 只要分數「前三高」的 document {\"$limit\": 3}] ); 會得出 3 筆結果 example-3-result123{ \"author\" : \"ty\", \"score\" : 95, \"views\" : 1000 , \"_id\" : ObjectId(\"55f5a1d3d4bede9ac365b25b\") }{ \"author\" : \"li\", \"score\" : 94, \"views\" : 999 , \"_id\" : ObjectId(\"55f5a1d3d4bede9ac365b25a\") }{ \"author\" : \"dave\", \"score\" : 85, \"views\" : 521 , \"_id\" : ObjectId(\"512bc962e835e68f199c8687\") } 常見的資料操作方法（二）再來要介紹$project、$unwind、$group這三個方法。 $project$project可以用來篩選或排除 document 已經存在的欄位、也可以用來創造出新的欄位。 假如有一個bookscollection 資料如下： books123456789101112131415161718192021222324{ \"_id\" : 1, title: \"abc123\", isbn: \"0001122223334\", author: { last: \"zzz\", first: \"aaa\" }, copies: 5, lastModified: \"2016-07-28\"}{ \"_id\" : 2, title: \"Baked Goods\", isbn: \"9999999999999\", author: { last: \"xyz\", first: \"abc\", middle: \"\" }, copies: 2, lastModified: \"2017-07-21\"}{ \"_id\" : 3, title: \"Ice Cream Cakes\", isbn: \"8888888888888\", author: { last: \"xyz\", first: \"abc\", middle: \"mmm\" }, copies: 5, lastModified: \"2017-07-22\"} 我們可以用$project來篩選需要的兩個欄位 title、lastModified，並創造出一個新的欄位 authorName。其中的 authorName 用了字串的$concat方法，把 author 的 first name 跟 last name 串連起來： example-4123456789101112131415db.books.aggregate( [ { $project: { title: true, // true 表示要留下這個欄位 lastModified: true, authorName: { // 產生一個新的欄位 authorName $concat: [ \"$author.first\", ' ', \"$author.last\" ] } } }] ) 產出結果如下： example-4-result123{ \"_id\" : 1, \"title\" : \"abc123\", lastModified: \"2016-07-28\", authorName: \"aaa zzz\" }{ \"_id\" : 2, \"title\" : \"Baked Goods\", lastModified: \"2017-07-21\", authorName: \"abc xyz\" }{ \"_id\" : 3, \"title\" : \"Ice Cream Cakes\", lastModified: \"2017-07-21\", authorName: \"abc xyz\" } 值得一提的是_id這個欄位：由於 _id 是 document 的主鍵，除非「特別排除」這個欄位，否則使用$project時預設都會保留下來。如果想要排除 _id，只需要再加上一行_id: false就行～ $unwind$unwind可以把 document 中的陣列資料「攤平」。聽起來好像很抽象，不如直接來看個例子。 假如有一個紀錄產品庫存的inventorycollection 資料如下： inventory12{ \"_id\" : 1, \"item\" : \"shirt\", \"sizes\": [ \"S\", \"M\", \"L\"] }{ \"_id\" : 2, \"item\" : \"shoes\", \"sizes\": [\"M\"] } 我們嘗試針對 sizes 這個陣列欄位使用$unwind： example-51db.inventory.aggregate( [ { $unwind: \"$sizes\" } ] ) 因為第一筆 document 中 sizes 陣列有三個值，所以攤平後會得到三筆資料。結果如下： example-5-result1234{ \"_id\" : 1, \"item\" : \"shirt\", \"sizes\" : \"S\" }{ \"_id\" : 1, \"item\" : \"shirt\", \"sizes\" : \"M\" }{ \"_id\" : 1, \"item\" : \"shirt\", \"sizes\" : \"L\" }{ \"_id\" : 2, \"item\" : \"shoes\", \"sizes\" : \"M\" } $unwind時常放在 pipeline 中間，幫助我們更直觀的處理陣列資料。 $group$group可以把 document 「分組」，還可以根據分組結果做數學運算。是非常好用的工具之一。 假如有一個記錄銷售的salescollection 資料如下： sales12345678{ \"_id\" : 1, \"item\" : \"abc\", \"quantity\" : \"2\", \"date\" : 2014-03-01}{ \"_id\" : 2, \"item\" : \"jkl\", \"quantity\" : \"1\", \"date\" : 2014-03-01}{ \"_id\" : 3, \"item\" : \"xyz\", \"quantity\" : \"1\", \"date\" : 2014-03-15}{ \"_id\" : 4, \"item\" : \"xyz\", \"quantity\" : \"20\", \"date\" : 2014-04-04}{ \"_id\" : 5, \"item\" : \"abc\", \"quantity\" : \"10\", \"date\" : 2014-04-04}{ \"_id\" : 6, \"item\" : \"def\", \"quantity\": \"5\", \"date\" : 2015-06-04}{ \"_id\" : 7, \"item\" : \"def\", \"quantity\": \"10\", \"date\" : 2015-09-10}{ \"_id\" : 8, \"item\" : \"abc\", \"quantity\" : \"5\" , \"date\" : 2016-02-06} 我們使用$group方法，計算出每一個 item 各別賣出了多少數量： _id：要做分組的欄位。範例中我們把相同 item 的資料 group 在一組。 totalSaleQuantity：我們新加上的欄位。透過$sum把相同 item 的 quantity 相加 example-612345678db.sales.aggregate([ { $group : { _id : \"$item\", // 用 item 欄位做分組 totalSaleQuantity: { $sum: \"$quantity\" } // 使用 $sum 把同個 item 的 quantity 相加 } } ]) 得出 4 種不同 item 以及各別賣出的總數量： example-6-result1234{ \"_id\" : \"abc\", \"totalSaleQuantity\" : 17 }{ \"_id\" : \"jkl\", \"totalSaleQuantity\" : 1 }{ \"_id\" : \"xyz\", \"totalSaleQuantity\" : 21 }{ \"_id\" : \"def\", \"totalSaleQuantity\" : 15 } 除了範例裡用的$sum之外，$group還時常搭配$count、$avg、$max等運算符使用。可以在文件中看到完整的用法。 Aggregation 綜合練習我們來試試把多個 stage 組成 pipeline 的綜合練習。 假如有一個訂單的ordercollection 如下。每筆 order 都包含顧客 id、訂單日期跟金額三個欄位。 我們的目標是找出在 2020 年間，每位顧客的： 第一筆訂單時間 訂單的總數 訂單的總金額 order123456789101112131415161718192021222324252627282930313233343536373839404142434445{ \"customer_id\": \"elise_smith@myemail.com\", \"orderdate\": ISODate(\"2020-05-30T08:35:52Z\"), \"value\": NumberDecimal(\"231.43\"),},{ \"customer_id\": \"elise_smith@myemail.com\", \"orderdate\": ISODate(\"2020-01-13T09:32:07Z\"), \"value\": NumberDecimal(\"99.99\"),},{ \"customer_id\": \"oranieri@warmmail.com\", \"orderdate\": ISODate(\"2020-01-01T08:25:37Z\"), \"value\": NumberDecimal(\"63.13\"),},{ \"customer_id\": \"tj@wheresmyemail.com\", \"orderdate\": ISODate(\"2019-05-28T19:13:32Z\"), \"value\": NumberDecimal(\"2.01\"),},{ \"customer_id\": \"tj@wheresmyemail.com\", \"orderdate\": ISODate(\"2020-11-23T22:56:53Z\"), \"value\": NumberDecimal(\"187.99\"),},{ \"customer_id\": \"tj@wheresmyemail.com\", \"orderdate\": ISODate(\"2020-08-18T23:04:48Z\"), \"value\": NumberDecimal(\"4.59\"),},{ \"customer_id\": \"elise_smith@myemail.com\", \"orderdate\": ISODate(\"2020-12-26T08:55:46Z\"), \"value\": NumberDecimal(\"48.50\"),},{ \"customer_id\": \"tj@wheresmyemail.com\", \"orderdate\": ISODate(\"2021-02-29T07:49:32Z\"), \"value\": NumberDecimal(\"1024.89\"),},{ \"customer_id\": \"elise_smith@myemail.com\", \"orderdate\": ISODate(\"2020-10-03T13:49:44Z\"), \"value\": NumberDecimal(\"102.24\"),} 首先，我們只需要 2020 年間的訂單，所以可以用$match寫出第一個 stage ： match12345678{ \"$match\": { \"orderdate\": { \"$gte\": ISODate(\"2020-01-01T00:00:00Z\"), // 時間大於等於 2020/1/1 \"$lt\": ISODate(\"2021-01-01T00:00:00Z\"), // 時間小於 2021/1/1 }, }}, 再來，由於我們要找出「每個使用者」的「第一筆訂單時間」，可以先使用$sort把所有訂單依照日期「由先而後」排序： sort12345{ \"$sort\": { \"orderdate\": 1, // 依照 orderdate 將時間由小而大排序 }} 最後，我們使用$group把訂單依照顧客 id做分組，並搭配： $first：找出每個顧客的第一筆訂單。因為先前已經 sort 過，所以第一筆訂單就是「時間最早」的訂單 $sum：計算出訂單總數、訂單總金額 group12345678{ \"$group\": { \"_id\": \"$customer_id\", // 依照 customer_id 做分組 \"first_purchase_date\": {\"$first\": \"$orderdate\"}, // 找出第一筆（也是最早的） orderdate \"total_value\": {\"$sum\": \"$value\"}, // 使用 sum 將每筆 order 的金額加總 \"total_orders\": {\"$sum\": 1}, // 使用 sum 計算總共有幾筆 order }} 我們把上述三個 stage 組裝成 pipeline，對 order collection 進行 aggregate 操作： example-71234567891011121314151617181920db.orders.aggregate([ // Match only orders made in 2020 {\"$match\": { \"orderdate\": { \"$gte\": ISODate(\"2020-01-01T00:00:00Z\"), \"$lt\": ISODate(\"2021-01-01T00:00:00Z\"), }, }}, // Sort by order date ascending {\"$sort\": { \"orderdate\": 1, }}, // Group by customer {\"$group\": { \"_id\": \"$customer_id\", \"first_purchase_date\": {\"$first\": \"$orderdate\"}, \"total_value\": {\"$sum\": \"$value\"}, \"total_orders\": {\"$sum\": 1}, }},]); 得出結果： example-7-result123456789101112131415161718{ customer_id: 'elise_smith@myemail.com', first_purchase_date: ISODate('2020-01-13T09:32:07.000Z'), total_value: NumberDecimal('482.16'), total_orders: 4},{ customer_id: 'oranieri@warmmail.com', first_purchase_date: ISODate('2020-01-01T08:25:37.000Z'), total_value: NumberDecimal('63.13'), total_orders: 1},{ customer_id: 'tj@wheresmyemail.com', first_purchase_date: ISODate('2020-08-18T23:04:48.000Z'), total_value: NumberDecimal('192.58'), total_orders: 2} 總結如果把CRUD比喻成格鬥遊戲裡的基本攻防招數，那Aggregation就是格鬥遊戲裡的連續技，若能好好善用會是很強大的武器～關於 Aggregation 更詳細的用法可以參考官方文件與 Practical MongoDB Aggregations 電子書。 下篇文章我們要介紹能夠加速 mongoDB 效能的 Indexes。","link":"/mongodb-from-scratch/3/"}],"tags":[{"name":"mongodb","slug":"mongodb","link":"/tags/mongodb/"},{"name":"database","slug":"database","link":"/tags/database/"},{"name":"mongodb-from-scratch","slug":"mongodb-from-scratch","link":"/tags/mongodb-from-scratch/"},{"name":"mongodb 教學","slug":"mongodb-教學","link":"/tags/mongodb-%E6%95%99%E5%AD%B8/"}],"categories":[{"name":"life","slug":"life","link":"/categories/life/"},{"name":"technology","slug":"technology","link":"/categories/technology/"},{"name":"blog","slug":"life/blog","link":"/categories/life/blog/"},{"name":"podcast","slug":"life/podcast","link":"/categories/life/podcast/"},{"name":"database","slug":"technology/database","link":"/categories/technology/database/"}]}